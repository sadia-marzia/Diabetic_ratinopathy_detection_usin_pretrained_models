
import cv2  # OpenCV library for image processing.
import os   # For handling directory paths and files.
import numpy as np  # For numerical operations and image manipulation.

# Preprocessing functions
def resize_image(image, target_size=(224, 224)):
    """Resizes the image to the target size."""
    return cv2.resize(image, target_size)

def extract_green_channel(image):
    """Extracts the green channel from the image, often the most useful channel in medical imaging for retinal images."""
    return image[:, :, 1]

def apply_clahe(image):
    """Applies CLAHE (Contrast Limited Adaptive Histogram Equalization) to enhance contrast."""
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    return clahe.apply(image)

def apply_gaussian_blur(image, kernel_size=(5, 5)):
    """Applies Gaussian blur to reduce noise and detail in the image."""
    return cv2.GaussianBlur(image, kernel_size, 0)

def sharpen_image(image):
    """Sharpens the image to make details more prominent."""
    sharpen_kernel = np.array([[-1, -1, -1],
                               [-1,  9, -1],
                               [-1, -1, -1]])
    return cv2.filter2D(image, -1, sharpen_kernel)

def normalize_image(image):
    """Normalizes pixel values to the range [0, 1] for consistency."""
    return image / 255.0

def augment_image(image):
    """Applies a horizontal flip to the image as a form of data augmentation."""
    return cv2.flip(image, 1)

# Paths for batch processing
input_folder = '/content/drive/My Drive/Colab Notebooks/Diabetic ratinopathy/messidor-2/DR224/dr224/'  # Folder containing raw images.
output_folder = '/content/drive/My Drive/Colab Notebooks/Diabetic ratinopathy/messidor-2/DR224/newpreprocess/'  # Folder to save processed images.

# Create output folder if it doesn't exist
os.makedirs(output_folder, exist_ok=True)  # Ensures the output directory exists.

# Function to preprocess and save each image
def preprocess_image(image_path, output_path, augment=False):
    """Preprocesses a single image by resizing, extracting the green channel, applying CLAHE, blurring, sharpening, normalizing,
       and optionally augmenting (flipping). Saves the processed image to the output path."""
    image = cv2.imread(image_path)  # Loads the image from the given path.

    if image is None:  # Checks if the image was loaded successfully.
        print(f"Failed to load image: {image_path}")
        return

    # Step-by-step preprocessing pipeline
    image_resized = resize_image(image)  # Step 1: Resize the image.
    green_channel = extract_green_channel(image_resized)  # Step 2: Extract the green channel.
    image_clahe = apply_clahe(green_channel.copy())  # Step 3: Apply CLAHE on the green channel.
    image_blurred = apply_gaussian_blur(image_clahe.copy(), kernel_size=(5, 5))  # Step 4: Apply Gaussian blur.
    image_sharpened = sharpen_image(image_blurred.copy())  # Step 5: Sharpen the image.
    image_normalized = normalize_image(image_sharpened.copy())  # Step 6: Normalize the image.

    if augment:  # Step 7: Apply augmentation if specified.
        image_normalized = augment_image(image_normalized)

    # Saves the processed image after scaling back to [0, 255] range.
    cv2.imwrite(output_path, (image_normalized * 255).astype(np.uint8))
    print(f"Processed and saved: {output_path}")

# Function to process the entire dataset, including subfolders
def process_dataset(input_dir, output_dir, augment=False):
    """Processes all images in the dataset directory by calling preprocess_image for each.
       Creates corresponding folder structure in the output directory."""
    for root, dirs, files in os.walk(input_dir):
        relative_path = os.path.relpath(root, input_dir)  # Finds relative path for organizing output.
        save_dir = os.path.join(output_dir, relative_path)
        os.makedirs(save_dir, exist_ok=True)  # Ensures subdirectories in output folder match input.

        for filename in files:  # Loops through each file in the folder.
            if filename.endswith('.jpg') or filename.endswith('.png'):  # Processes only image files.
                input_path = os.path.join(root, filename)
                output_path = os.path.join(save_dir, filename)
                preprocess_image(input_path, output_path, augment=augment)  # Processes and saves the image.

# Preprocesses all images in the dataset folder with augmentation
process_dataset(input_folder, output_folder, augment=True)
