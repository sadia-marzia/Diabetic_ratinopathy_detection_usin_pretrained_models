import cv2  # OpenCV for image processing
import os   # To handle directory paths
import numpy as np  # For numerical operations
import matplotlib.pyplot as plt  # For plotting images

# Preprocessing functions
def resize_image(image, target_size=(224, 224)):
    """Resizes the image to a target size for consistency in model input dimensions."""
    return cv2.resize(image, target_size)

def extract_green_channel(image):
    """Extracts the green channel, commonly used in retinal imaging."""
    green_channel = image[:, :, 1]  # Takes only the green channel of the image.
    return green_channel

def apply_clahe(image):
    """Applies CLAHE to improve contrast, especially useful for medical images."""
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))  # CLAHE parameters
    return clahe.apply(image)

def apply_gaussian_blur(image, kernel_size=(5, 5)):
    """Applies Gaussian blur to reduce noise and smooth the image."""
    return cv2.GaussianBlur(image, kernel_size, 0)

def sharpen_image(image):
    """Sharpens the image to highlight edges and finer details."""
    sharpen_kernel = np.array([[-1, -1, -1],
                               [-1,  9, -1],
                               [-1, -1, -1]])  # Sharpening kernel
    return cv2.filter2D(image, -1, sharpen_kernel)

def normalize_image(image):
    """Normalizes pixel values to the range [0, 1] to prepare the image for input to a model."""
    return image / 255.0

# Path to a sample input image
input_image_path = '/content/drive/My Drive/Colab Notebooks/Diabetic ratinopathy/messidor-2/DR224/dr224/Severe/0cb14014117d.png'

# Function to visualize each preprocessing step
def visualize_preprocessing(image_path):
    # Read the image
    image = cv2.imread(image_path)

    if image is None:
        print(f"Failed to load image: {image_path}")
        return

    # Step-by-step image processing
    image_resized = resize_image(image)  # Step 1: Resize
    green_channel = extract_green_channel(image_resized)  # Step 2: Green Channel
    image_clahe = apply_clahe(green_channel.copy())  # Step 3: CLAHE
    image_blurred = apply_gaussian_blur(image_clahe.copy(), kernel_size=(5, 5))  # Step 4: Gaussian Blur
    image_sharpened = sharpen_image(image_blurred.copy())  # Step 5: Sharpen
    image_normalized = normalize_image(image_sharpened.copy())  # Step 6: Normalize

    # Convert images to the [0, 255] range for displaying
    green_channel_disp = green_channel
    image_clahe_disp = image_clahe
    image_blurred_disp = image_blurred
    image_sharpened_disp = image_sharpened
    image_normalized_disp = image_normalized * 255.0  # Scaling normalized image for display

    # Plotting all stages
    fig, axes = plt.subplots(1, 5, figsize=(20, 5))
    axes[0].imshow(cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB))
    axes[0].set_title("Original Image")

    axes[1].imshow(green_channel_disp, cmap='gray')
    axes[1].set_title("Green Channel")

    axes[2].imshow(image_clahe_disp, cmap='gray')
    axes[2].set_title("After CLAHE")

    axes[3].imshow(image_blurred_disp, cmap='gray')
    axes[3].set_title("After Gaussian Blur")

    axes[4].imshow(image_sharpened_disp, cmap='gray')
    axes[4].set_title("After Sharpening")

    for ax in axes:
        ax.axis("off")  # Hide axis for a cleaner look

    plt.tight_layout()
    plt.show()

# Visualize the preprocessing for one image
visualize_preprocessing(input_image_path)
